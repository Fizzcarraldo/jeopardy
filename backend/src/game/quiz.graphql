type Game {
  id: Int
  players: [Player]
  activePlayer: Int
  state: String
  activeQuestion: Question
}

type Host {
  state: String
  questionRows: [QuestionRow]
}

type Stage {
  state: String
  players: [Player]
  questionRows: [QuestionRow]
  activePlayer: Int
  activeQuestion: Question
}

type QuestionRow {
  category: Category
  questionThumbnails: [QuestionThumbnail]
}

type QuestionThumbnail {
  color: String
  value: Int
}

type Buzzer {
  gameId: Int
  playerId: Int
  player: Player
  state: String
}

type Player {
  name: String
  score: Int
  color: String
  id: Int
}

type Category {
  id: String
  displayName: String
}

type Question {
  category: String
  value: Int
  question: String
  answer: String
}

type Subscription {
  gameSubscription(gameId: Int!): String
}

type Query { 
  getStage(gameId: Int!): Stage
  getHost(gameId: Int!): Host
  getBuzzer(gameId: Int!, playerId: Int!): Buzzer
}

type Mutation {
  startNewGame(client: String): Int
  createPlayer(gameId: Int!, name: String): Int
  selectQuestion(gameId: Int, category: String, value: Int): Boolean
  pushBuzzer(gameId: Int, playerId: Int): Boolean
  hostStartGame(gameId: Int, playerId: Int): Boolean
  verifyAnswer(gameId: Int, verfication: String): Boolean
  skipAnswer(gameId: Int): Boolean
}
